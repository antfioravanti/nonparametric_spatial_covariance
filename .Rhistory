install.packages("stpp")
library(stpp)
lgcp1 <- rlgcp(npoints = 200, nx = 50, ny = 50, nt = 50, separable = FALSE,
+ model = "gneiting", param = c(1, 1, 1, 1, 1, 2), var.grf = 1, mean.grf = 0)
lgcp1 <- rlgcp(npoints = 200, nx = 50, ny = 50, nt = 50, separable = FALSE,
model = "gneiting", param = c(1, 1, 1, 1, 1, 2), var.grf = 1,
mean.grf = 0)
lgcp1
lgcp1 <- rlgcp(npoints = 200, nx = 50, ny = 50, nt = 50, separable = FALSE,
model = "gneiting", param = c(1, 1, 1, 1, 1, 2), var.grf = 1,
mean.grf = 0)
N <- lgcp1$Lambda[,,1]
for(j in 2:(dim(lgcp1$Lambda)[3])){N <- N + lgcp1$Lambda[, , j]}
image(N, col = grey((1000:1) / 1000))
box()
animation(lgcp1$xyt, cex = 0.8, runtime = 10, add = TRUE,
prevalent = "orange")
lgcp1 <- rlgcp(npoints = 200, nx = 50, ny = 50, nt = 50, separable = FALSE,
model = "gneiting", param = c(1, 1, 1, 1, 1, 2), var.grf = 1,
mean.grf = 0)
N <- lgcp1$Lambda[,,1]
for(j in 2:(dim(lgcp1$Lambda)[3])){N <- N + lgcp1$Lambda[, , j]}
image(N, col = grey((1000:1) / 1000))
box()
lgcp2 <- rlgcp(npoints = 200, nx = 50, ny = 50, nt = 50, separable = TRUE,
model = "exponential", param = c(1, 1, 1, 1, 1, 2), var.grf = 2,
mean.grf = -0.5 * 2)
N <- lgcp2$Lambda[, , 1]
for(j in 2:(dim(lgcp2$Lambda)[3])){N <- N + lgcp2$Lambda[, , j]}
image(N, col = grey((1000:1) / 1000)) ; box()
if (!require(CompRandFld)) install.packages("CompRandFld"); library(CompRandFld)
write('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', file = "~/.Renviron", append = TRUE)
Sys.which("make")
install.packages("jsonlite", type = "source")
12.48/47.32
700/2
350*6
700*2
300*6
300*12*30
300*6
22*0.6
22*0.6*4*4
22*(1-0.43)*4*4
23*(1-0.43)*4*4
15/0.6
15/(1-0.43)
23*1.19
27.37*4*4
27.37*4*4*12
25*4*4
400*12
400*12*0.6
load("C:/Users/fioravanti/OneDrive - tu-dortmund.de/Desktop/af/pipbib3/Codes/spatiotemporal_simulations/separable_nonseparable_covariances/STP_Sim1.R")
200000*0.2
200000*0.02
200000*0.03
400000*0.03
start = 9.45
end = 12
start = 9.45
end = 12
(end-start)/start
start = 9.45
end = 12
init = 5000
g = (end-start)/start
w = (1+g)*init
print(g)
print(w)
25000*0.91+15000
470000*0.15
exp(0)
950*12
950*12*3
# SIMULATION OF GRID
grid_size = 30
xdim = grid_size # horizontal size
ydim = grid_size #vertical size
# Erzeugt zufällige Koordinaten im Bereich [0, 1] für das Raster
grid = data.frame(x = runif(xdim, 0, 1), y = runif(ydim, 0, 1))
# ORDERED GRID
#grid = grid %>% arrange(x, y)
# NORM ORDERED GRID
# grid$norm = sqrt(grid$x^2 + grid$y^2)
# grid = grid %>% arrange(norm)
# grid = grid[, 1:2]
# Selecting Points with many neighbours and few neighbours
point_many = select_point_by_neighbour(grid, choice = "many", perc = 0.1)
# MASTERARBEIT DARWIN
#-------------------------------------------------------------------------------
if (!require(MASS)) install.packages("MASS"); library(MASS)
if (!require(dplyr)) install.packages("dplyr"); library(dplyr)
if (!require(ggplot2)) install.packages("ggplot2"); library(ggplot2)
if (!require(foreach)) install.packages("foreach"); library(foreach)
if (!require(doParallel)) install.packages("doParallel"); library(doParallel)
if (!require(tictoc)) install.packages("tictoc"); library(tictoc)
if (!require(reshape2)) install.packages("reshape2"); library(reshape2)
if (!require(pheatmap)) install.packages("pheatmap"); library(pheatmap)
setwd(file.path(dirname(rstudioapi::getActiveDocumentContext()$path)))
source("utils_functions.R") # Upload functions in separate script
source("plotting.R") # Upload functions in separate script
set.seed(1234)# set seed for replication
#-------------------------------------------------------------------------------
# SIMULATION OF GRID
grid_size = 30
xdim = grid_size # horizontal size
ydim = grid_size #vertical size
# Erzeugt zufällige Koordinaten im Bereich [0, 1] für das Raster
grid = data.frame(x = runif(xdim, 0, 1), y = runif(ydim, 0, 1))
# ORDERED GRID
#grid = grid %>% arrange(x, y)
# NORM ORDERED GRID
# grid$norm = sqrt(grid$x^2 + grid$y^2)
# grid = grid %>% arrange(norm)
# grid = grid[, 1:2]
# Selecting Points with many neighbours and few neighbours
point_many = select_point_by_neighbour(grid, choice = "many", perc = 0.1)
point_few = select_point_by_neighbour(grid, choice = "few", perc = 0.1)
point_border = select_point_by_neighbour(grid, choice = "border",
perc = 0.2, margin = 0.05)
index_many = point_many$index
index_few = point_few$index
index_border = point_border$index
points = rbind(point_many$point,
point_few$point,
point_border$point,
make.row.names=FALSE)
# #-----------------------------------------------------------------------------
# # GENERATE TRUE ANALYTICAL COVARIANCE
# #-----------------------------------------------------------------------------
#
sigma = 1
phi = 3
true_covariance = cov_exponential(grid, sigma, phi, method = "difference")
plot_matrix_image(true_covariance, main = paste0("True Covariance Matrix\n",
"phi=", phi,", ",
"sigma=", sigma))
grid
grid_size = 30
xdim = grid_size # horizontal size
ydim = grid_size #vertical size
# Erzeugt zufällige Koordinaten im Bereich [0, 1] für das Raster
grid = data.frame(x = runif(xdim, 0, 1), y = runif(ydim, 0, 1))
# NORM ORDERED GRID
grid$norm = sqrt(grid$x^2 + grid$y^2)
grid = grid %>% arrange(norm)
grid = grid[, 1:2]
# Selecting Points with many neighbours and few neighbours
point_many = select_point_by_neighbour(grid, choice = "many", perc = 0.1)
point_few = select_point_by_neighbour(grid, choice = "few", perc = 0.1)
point_border = select_point_by_neighbour(grid, choice = "border",
perc = 0.2, margin = 0.05)
index_many = point_many$index
index_few = point_few$index
index_border = point_border$index
points = rbind(point_many$point,
point_few$point,
point_border$point,
make.row.names=FALSE)
# #-----------------------------------------------------------------------------
# # GENERATE TRUE ANALYTICAL COVARIANCE
# #-----------------------------------------------------------------------------
#
sigma = 1
phi = 3
true_covariance = cov_exponential(grid, sigma, phi, method = "difference")
plot_matrix_image(true_covariance, main = paste0("True Covariance Matrix\n",
"phi=", phi,", ",
"sigma=", sigma))
sigma = 1
phi = 2
perc = 0.1
sigma = 1
phi = 2
perc = 0.1
Ns = c(50,70, 100) # grid sizes
bandwidths = c(0.1, 0.2) # bandwidths
kernel = "rechteck_kernel"
truecov_matrices = list()
estcov_matrices = list()
covariances_df = data.frame(
grid_size = integer(),
phi = numeric(),
bandwidth = numeric(),
spectral_norm = numeric(),
frob_norm = numeric()
)
point_diff_df = data.frame(
grid_size = integer(),
phi = numeric(),
bandwidth = numeric(),
point_type = character(),
distance_type = character(),
true_cov = numeric(),
est_cov = numeric(),
difference = numeric()
)
tic("Loop for different Grid Sizes")
for(N in Ns){
cat("Grid Size: ", N, "\n")
estcov_matrices[[as.character(N)]] = list()
# GRID GENERATION #
xdim = N # horizontal size
ydim = N #vertical size
# Erzeugt zufällige Koordinaten im Bereich [0, 1] für das Raster
grid = data.frame(x = runif(xdim, 0, 1), y = runif(ydim, 0, 1))
# ORDERING OF THE GRID (ASCENDING)
#grid = grid %>% arrange(x, y)
# Selecting Points with many neighbours and few neighbours
point_many = select_point_by_neighbour(grid, choice = "many", perc = perc)
point_few = select_point_by_neighbour(grid, choice = "few", perc = perc)
point_border = select_point_by_neighbour(grid, choice = "border", perc = 0.1,
margin = 0.05)
points = rbind(point_many$point,
point_few$point,
point_border$point,
make.row.names=FALSE)
# True Covariance
truecov_matrices[[as.character(N)]] = cov_exponential(grid,
sigma, phi,
method = "difference")
# Spatial Simulation
X = mvrnorm(n = 1, mu = rep(0, nrow(grid)),
Sigma = truecov_matrices[[as.character(N)]])
grid$sim = X
tic("Loop for different Bandwidths")
for(bw in bandwidths){
cat("Grid Size:", N, "Bandwidths: ", bw, "\n")
est_cov_matrix = matrix(NA, nrow = nrow(grid),
ncol = nrow(grid))
for(i in 1:nrow(grid)) {
for(j in 1:nrow(grid)) {
est_cov_matrix[i,j] = kernel_cov(as.numeric(grid[i, 1:2]),
as.numeric(grid[j, 1:2]),
grid$sim, grid[,1:2],
bw, kernel)$covariance
}
}
estcov_matrices[[as.character(N)]][[as.character(bw)]] = est_cov_matrix
# COVARIANCE
spectral_norm = norm(truecov_matrices[[as.character(N)]] -
estcov_matrices[[as.character(N)]][[as.character(bw)]],
type = "2")
frob_norm = norm(truecov_matrices[[as.character(N)]] -
estcov_matrices[[as.character(N)]][[as.character(bw)]],
type = "F")
covariances_df = rbind(covariances_df, data.frame(
grid_size = N,
phi = phi,
bandwidth = bw,
spectral_norm = spectral_norm,
frob_norm = frob_norm
))
# POINTS
for(i in 1:nrow(points)){
distance_points = get_distance_points(grid[, c("x", "y")],
points[i, c("x", "y")],
exclude_self = T)
x_point = points[i, c("x")]
y_point = points[i, c("y")]
type = points[i, c("type")]
for(j in 1:nrow(distance_points)){
distance_type = distance_points[j, "type"]
true_point_cov = sigma^2*exp(-(x_point - distance_points[j, "x"] / phi)*
exp(-(y_point - distance_points[j, "y"]) / phi))
est_point_cov = kernel_cov(
as.numeric(points[i, c("x", "y")]),
as.numeric(distance_points[j, c("x", "y")]),
X,
grid[,1:2],
bw,
kernel)
point_diff_df = rbind(point_diff_df, data.frame(
grid_size = N,
phi = phi,
bandwidth = bw,
point_type = type,
distance_type = distance_type,
true_cov = true_point_cov,
est_cov = est_point_cov$covariance,
difference = abs(true_point_cov - est_point_cov$covariance)
)
)
}
}
}
toc()
}
toc()
print(covariances_df)
print(point_diff_df)
grid_size = 10
N = 10
xdim = N # horizontal size
ydim = N #vertical size
# Erzeugt zufällige Koordinaten im Bereich [0, 1] für das Raster
grid = data.frame(x = runif(xdim, 0, 1), y = runif(ydim, 0, 1))
# Selecting Points with many neighbours and few neighbours
point_many = select_point_by_neighbour(grid, choice = "many", perc = 0.1)
point_few = select_point_by_neighbour(grid, choice = "few", perc = 0.1)
point_border = select_point_by_neighbour(grid, choice = "border",
perc = 0.2, margin = 0.05)
index_many = point_many$index
index_few = point_few$index
index_border = point_border$index
points = rbind(point_many$point,
point_few$point,
point_border$point,
make.row.names=FALSE)
sigma = 1
phi = 3
true_covariance = cov_exponential(grid, sigma, phi, method = "difference")
plot_matrix_image(true_covariance, main = paste0("True Covariance Matrix\n",
"phi=", phi,", ",
"sigma=", sigma))
X = mvrnorm(n = 1, mu = rep(0, nrow(grid)), Sigma = true_covariance)
grid$sim = X
# Add a 'type' variable to indicate point categories
grid$type = "Normal"
grid$type[index_many] = "Many"
grid$type[index_few] = "Few"
grid$type[index_border] = "Border"
# Define custom shapes for each type
shape_values = c("Normal" = 16, "Many" = 2, "Few" = 3, "Border" = 4)
# Create the plot
ggplot(grid, aes(x = x, y = y, color = sim, shape = type)) +
geom_point(size = 5) +
scale_color_gradient(low = "blue", high = "red") +
scale_shape_manual(values = shape_values) +
labs(title = "Simulated Spatial Data",
x = "X Coordinate",
y = "Y Coordinate",
color = "Value",
shape = "Point Type") +
theme_minimal()
